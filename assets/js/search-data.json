{
  
    
        "post0": {
            "title": "Re-work of GitDiscoverer.com",
            "content": "This post was originally posted on LinkedIn . Link to web app - GitDiscoverer .",
            "url": "https://rajkstats.github.io/dev/2020/03/26/gitdiscoverer.html",
            "relUrl": "/2020/03/26/gitdiscoverer.html",
            "date": " • Mar 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rajkstats.github.io/dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "The Python Package, R users need : rpy2",
            "content": "Recently, I came across a situation where I would have to write a R library which is not available in Python. I was working on a machine learning pipeline in Python where I had to combine all pre-processing into a one single flow. Ofcourse, you are not limited to these libraries. You can always add your own functions in Python. However, author of that R package has done a pretty good work and in interest of time, I wanted to use it in one of my workflows. . I was in a situation where I had only few options: . Use R and python scripts separately and merge the results at last all together in a different script. | Implement that library in Python | Use rpy2 | rpy2 is a python package which allows you to use R functionalities in Python environment. Basically, you need to import R libraries using rpy2 functions in Python environment. Also, it allows you to convert your R objects to Python objects back and forth (for ex: Converting R and Python dataframes back and forth ). In this article, I will walk you through implementation of stringdist in python which is an awesome package to calculate distance between two strings using different methods. Idea of writing this article here is to show implementation of stringdist R package in python environment using rpy2. . import rpy2 import rpy2.robjects as robjects import rpy2.robjects.packages as rpackages from rpy2.robjects.packages import importr from pandas import read_csv import pandas as pd # pandas2ri to convert dataframes back and forth in R and # python dataframes # useful: when you want to load a R dataframe and then convert # to pandas df or vice-versa from rpy2.robjects import pandas2ri # Installing required packages from R in rpy2 to use function # Importing utils from R to install required packages utils= importr(&#39;utils&#39;) #You can pass a list of R packages in packnames below packnames = (&#39;stringdist&#39;,&#39;base&#39;) # R vector of strings from rpy2.robjects.vectors import StrVector # Selectively install what needs to be install. # We are fancy, just because we can. names_to_install = [x for x in packnames if not rpackages.isinstalled(x)] if len(names_to_install) &gt; 0: utils.install_packages(StrVector(names_to_install)) . Reading a movies dataset with title and ratings and a dataset with corresponding messy movie titles to calculate string distance between two titles using different methods which I have used in this jupyter notebook. . Looking at the datasets: . movies= read_csv(&#39;/Users/raj/Desktop/stringdist/movies.txt&#39;) . . messy_movie_titles= read_csv(&#39;/Users/raj/Desktop/stringdist/ user_queries.txt&#39;) # Assingning column name messy_title messy_movie_titles.columns = [&#39;messy_title&#39;] messy_movie_titles.head() . . #Combining orginal movie title and # messy movie title in one dataframe # Since R stringdist expects an input in same way result=pd.concat([movies[&#39;title&#39;], messy_movie_titles[&#39;messy_title&#39;]], axis=1,ignore_index=False) result.columns = [&#39;title&#39;,&#39;messy_title&#39;] result.head() # Calculating distance between strings # using stringdist R package with methods # Levenshtein ,Cosine And Jaccard Distance # importing stringdist package in python # using importr function stringdist = importr(&#39;stringdist&#39;) #Lets check type of the result object type(result) pandas.core.frame.DataFrame . Need to convert this Python pandas dataframe to R data frame using pandas2ri to pass to stringdist function which expects an R df as input. . pandas2ri.activate() robjects.globalenv[&#39;result&#39;] = result # Calculating Levenshtein distance between the two titles ld =stringdist.stringdist(result[&#39;title&#39;], result[&#39;messy_title&#39;], method=&#39;lv&#39;) result[&#39;Levenshtein_distance&#39;] = 0 result[&#39;Levenshtein_distance&#39;] = ld # Calculating Cosine distance between the two titles cd =stringdist.stringdist(result[&#39;title&#39;], result[&#39;messy_title&#39;], method=&#39;cosine&#39;,q=2) result[&#39;Cosine_distance&#39;] = 0 result[&#39;Cosine_distance&#39;] = cd # Calculating Jaccard distance between the two titles jd =stringdist.stringdist(result[&#39;title&#39;], result[&#39;messy_title&#39;], method=&#39;jaccard&#39;,q=2) result[&#39;Jaccard_distance&#39;] = 0 result[&#39;Jaccard_distance&#39;] = jd #Printing final data frame which contains the results from all distances . . Credits: joyofdata .",
            "url": "https://rajkstats.github.io/dev/2018/04/24/rpy2.html",
            "relUrl": "/2018/04/24/rpy2.html",
            "date": " • Apr 24, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Raj, a data scientist. I help organisations use data to make well informed business decisions. . In June 2017, I joined the C1X team as a data scientist. Currently I’m working on building a category reporting system for a large ecommerce client. . Previously I have: . Enabled data access to the entire organization by setting up Apache Superset and Metabase. This helped folks access reports in a self-service manner using industry-leading tools. Allowing easy access to rich reports is truly a game-changer in any organization . | Developed a URL classification model to identify and enrich an ad impression to provide more context for campaign selection . | AWS cost optimisation by developing a routing model to match ad impressions with bidders. . | Identifying top monetisation friendly users based on various buying intents. This helped us identify which publisher had a premium audience and made us focus more of our efforts on growing those accounts. . | Outside all this, I love cooking, bit of poetry and morning walks. . I’ve lived in Bengaluru(India) since 2017 but grew up in New Delhi (India). .",
          "url": "https://rajkstats.github.io/dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rajkstats.github.io/dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}